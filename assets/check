#!/bin/bash
# vim: set ft=sh

set -eu
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

resource_dir=$(dirname $0)
source "$resource_dir/common.sh"

# for jq
PATH=/usr/local/bin:$PATH

payload=$TMPDIR/maven-resource-request

cat > $payload <&0

debug=$(jq -r '.source.debug // empty' < $payload)
if [ "$debug" = "true" ]; then
  set -x
fi

artifact=$(jq -r '.source.artifact // empty' < $payload)
url=$(jq -r '.source.url // empty' < $payload)
username=$(jq -r '.source.username // empty' < $payload)
password=$(jq -r '.source.password // empty' < $payload)

version=$(jq -r '.version.version // 0' < $payload)

# error checking
[ -z "$artifact" ] && error_and_exit 'invalid payload (must specify artifact)'
[ -z "$url" ] && error_and_exit 'invalid payload (must specify url)'

groupId=$(get_group_id $artifact)
artifactId=$(get_artifact_id $artifact)

export MAVEN_BASEDIR=$resource_dir
"$resource_dir/mvnw" versions:display-dependency-updates \
  -f "$resource_dir/.mvn/pom-template.xml" \
  -s "$resource_dir/.mvn/settings.xml" \
  -Drepository.url="$url" \
  -Drepository.username="$username" \
  -Drepository.password="$password" \
  -Dtemplate.groupId="$groupId" \
  -Dtemplate.artifactId="$artifactId" \
  -Dtemplate.type="$(get_packaging $artifact)" \
  -Dtemplate.version="$version" \
  -DserverId=maven-resource \
  -DallowSnapshots=true

metadata_file=~/.m2/repository/${groupId//.//}/${artifactId}/maven-metadata-maven-resource.xml

# return empty array if no artifact found
if [ ! -f "$metadata_file" ]; then
  echo "[]" >&3
  exit 0
fi

metadata=$(cat "$metadata_file")

echo "$metadata"

echo "not implemented yet!" >&3
