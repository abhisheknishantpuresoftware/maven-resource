#!/bin/bash
# vim: set ft=sh

set -eu
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

resource_dir=$(dirname $0)
source "$resource_dir/common.sh"

source=${1:-}
if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/maven-resource-request.XXXXXX)

cat > $payload <&0

debug=$(jq -r '.source.debug //empty' < $payload)
if [ "$debug" = "true" ]; then
  set -x
fi

artifact=$(jq -r '.source.artifact //empty' < $payload)
url=$(jq -r '.source.url // empty' < $payload)
username=$(jq -r '.source.username // empty' < $payload)
password=$(jq -r '.source.password // empty' < $payload)

file=$(jq -r '.params.file //empty' < $payload)
version_file=$(jq -r '.params.version_file //empty' < $payload)

# error checking
[ -z "$artifact" ] && error_and_exit 'invalid payload (must specify artifact)'
[ -z "$url" ] && error_and_exit 'invalid payload (must specify url)'
[ -z "$file" ] && error_and_exit 'invalid payload (must specify file)'
[ -z "$version_file" ] && error_and_exit 'invalid payload (must specify version_file)'

cd $source

# transform this: build-output/your-artifact-*.jar
#      into this: build-output/your-artifact-1.0.0-rc.0.jar
file=$(ls $file)
version=$(cat $version_file)

groupId=$(get_group_id $artifact)
artifactId=$(get_artifact_id $artifact)
packaging=$(get_packaging $artifact)

export MAVEN_BASEDIR=$resource_dir
"$resource_dir/mvnw" deploy:deploy-file \
  -s "$resource_dir/.mvn/settings.xml" \
  -Dfile="$file" \
  -DrepositoryId=maven-resource \
  -Durl="$url" \
  -DgroupId="$groupId" \
  -DartifactId="$artifactId" \
  -Dpackaging="$packaging" \
  -Dversion="$version" \
  -Drepository.username="$username" \
  -Drepository.password="$password"

if is_snapshot "$version"; then

  metadata_file=~/.m2/repository/${groupId//.//}/${artifactId}/${version}/maven-metadata-maven-resource.xml

  version=$(cat $metadata_file | xmllint --xpath "/metadata/versioning/snapshotVersions/snapshotVersion[extension='$packaging']/value/text()" - 2>/dev/null)
fi

jq -n \
--arg version "$version" \
'{
  version: {version: $version}
}' >&3
